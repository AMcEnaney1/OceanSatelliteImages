## Aidan McEnaney
## July 12th, 2023
## Code for various models used to get parameters

## Start of imports

import satFunctions
import os

## End of imports

def model_routine_space_eff(bbox, date_tuples, project_name, model, poly_dir, request_function, npy_save_to=None,
                            polymer_root_name='polymer-v4.16.1'):
    """
    This function handles downloading, unzipping and moving files,
    before then running POLYMER on them, calling the specified model,
    then deleting the raw nc files and data to save on storage.

    Args:
        bbox (tuple): Bounding box coordinates.
        date_tuples (list of tuples): List of date tuples for the time periods.
        project_name (str): Name of the project.
        model (str): Name of the model to be called.
        poly_dir (str): Path to the directory where POLYMER will operate.
        request_function (function): Function to call for downloading files.
        npy_save_to (str): Path to save npy files. Default is None.
        polymer_root_name (str): Root name of POLYMER executable. Default is 'polymer-v4.16.1'.

    Returns:
        None
    """

    if (npy_save_to == None):  # Default folder for npy files, this is so POLYMER doesnt get upset
        npy_save_to = project_name + '_' + 'npyFiles'

    for i in range(len(date_tuples)):

        date_tuple = [(str(date_tuples[i][0]), str(date_tuples[i][1]))]

        poly_dir2 = satFunctions.remove_overlap(os.getcwd(), poly_dir)

        satFunctions.sentinelsat_routine(bbox, date_tuple, poly_dir2, request_function)

        filevals = satFunctions.get_surface_level_folders(poly_dir)  # Gets a list of the downloaded folders

        for i in range(len(filevals)):
            filevals[i] = os.path.join(poly_dir, filevals[i])

        folder = satFunctions.most_recent_folder(filevals)

        satFunctions.call_polymer(folder)

        convert_eff(poly_dir, npy_save_to, model, polymer_root_name=polymer_root_name)

        satFunctions.delete_folder_with_contents(folder) # Deletes sentinel folder
        file = satFunctions.find_files_with_strings(poly_dir, folder) # Finds polymer output file
        satFunctions.del_file(file[0]) # Deletes found file
        satFunctions.delete_folder_with_contents(os.path.join(poly_dir, npy_save_to)) # Deletes the excess files generated by model

def model_routine(bbox, date_tuples, project_name, path, model, poly_dir, request_function,
                  del_sat_folder=False, del_poly_file=False, del_excess=False,
                  npy_save_to=None, polymer_root_name='polymer-v4.16.1'):
    """
    Similar to 'model_routine_space_eff()', however, by default none of files are deleted.
    This would probably take up hundreds of gigabytes, even with a relatively small number of data points.
    As such this function is really only useful for testing purposes or to view very small batches of data.

    Args:
        bbox (tuple): Bounding box coordinates.
        date_tuples (list of tuples): List of date tuples for the time periods.
        project_name (str): Name of the project.
        model (str): Name of the model to be called.
        poly_dir (str): Path to the directory where POLYMER will operate.
        request_function (function): Function to call for downloading files.
        npy_save_to (str): Path to save npy files. Default is None.
        polymer_root_name (str): Root name of POLYMER executable. Default is 'polymer-v4.16.1'.

    Returns:
        None
    """

    if (npy_save_to == None):  # Default folder for npy files, this is so POLYMER doesnt get upset
        npy_save_to = project_name + '_' + 'npyFiles'

    for i in range(len(date_tuples)):

        date_tuple = [(str(date_tuples[i][0]), str(date_tuples[i][1]))]

        poly_dir2 = satFunctions.remove_overlap(os.getcwd(), poly_dir)

        satFunctions.sentinelsat_routine(bbox, date_tuple, poly_dir2, request_function)

        filevals = satFunctions.get_surface_level_folders(poly_dir)  # Gets a list of the downloaded folders

        for i in range(len(filevals)):
            filevals[i] = os.path.join(poly_dir, filevals[i])

        folder = satFunctions.most_recent_folder(filevals)

        satFunctions.call_polymer(folder)

        convert_eff(poly_dir, npy_save_to, model, polymer_root_name=polymer_root_name)

        if (del_sat_folder):
            satFunctions.delete_folder_with_contents(folder) # Deletes sentinel folder

        if (del_poly_file):
            file = satFunctions.find_files_with_strings(poly_dir, folder) # Finds polymer output file
            satFunctions.del_file(file[0]) # Deletes found file

        if (del_excess):
            satFunctions.delete_folder_with_contents(os.path.join(poly_dir, npy_save_to)) # Deletes the excess files generated by model

def convert_eff(tmp_, npy_save_to, model_func, polymer_root_name):
    """
    Converts output from POLYMER (NetCDF) to NumPy files, calls a specified model,
    and performs necessary directory changes.

    Args:
        tmp_ (str): Temporary directory where POLYMER output is stored.
        npy_save_to (str): Path to save NumPy files.
        model_func (function): Specified model function to be called.
        polymer_root_name (str): Root name of POLYMER directory.

    Returns:
        None
    """

    os.chdir(os.path.join(os.getcwd(), polymer_root_name)) # Change directory to that of polymer

    tmp_ = satFunctions.remove_overlap(os.getcwd(), tmp_)

    satFunctions.move_files_by_type(os.getcwd(), tmp_, '.nc') # Moves the outputs from POLYMER

    filevals = satFunctions.get_surface_level_folders(tmp_) # Gets a list of the downloaded folders

    paths = satFunctions.find_files_with_strings(tmp_, filevals) # Get nc files output by POLYMER to convert to npy

    for path in paths: # Creates npy files for all the parts of each nc file
        satFunctions.convert_nc_to_npy(path, save_to=npy_save_to)

    path = satFunctions.most_recent_folder(paths)

    satFunctions.convert_nc_to_npy(path, save_to=npy_save_to)

    name = satFunctions.remove_overlap(tmp_, paths[0])
    name = name.rsplit('.', 1)[0]

    model_func(os.getcwd(), tmp_, npy_save_to, name) # Calls the specified model

    os.chdir(os.path.dirname(os.getcwd())) # Move back one directory, like with cd ..

def chlor(changeDir, tmp_, npy_save_to, name):
    """
    Algorithm to calculate chlorophyll-a concentration from remote sensing data.
    https://www.sciencedirect.com/science/article/pii/S1569843223000456#b0040

    Args:
        changeDir (str): Directory path for changing directory.
        tmp_ (str): Temporary directory path.
        npy_save_to (str): Path to save NumPy files.
        name (str): Name for saving results.

    Returns:
        None
    """

    os.chdir(changeDir)  # Change directory to that of polymer, just in case
    chlor_alg = 'algOut'  # Folder name for chlorophyll algorithm output files
    path2 = os.path.join(tmp_, npy_save_to)

    # Defining regression coefficients
    vals = []
    vals.append(0.761)
    vals.append(0.3495)
    vals.append(-1.512)
    vals.append(1.925)
    vals.append(-9.0585)
    vals.append(8.4015)

    filevals = ['Rw443', 'Rw490', 'Rw560', 'Rw674', 'Rw681'] # Defining the bands we care about

    paths = satFunctions.find_files_with_strings(path2, filevals) # Getting file paths for npy files

    saveLoc = os.path.join(os.getcwd(), tmp_)
    satFunctions.create_folder(saveLoc, chlor_alg)
    saveLoc = os.path.join(saveLoc, chlor_alg)

    satFunctions.calculate_and_save_result(paths, vals, name, saveLoc)